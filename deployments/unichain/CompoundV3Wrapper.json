{
  "address": "0x7d809B3b23b62D8a455831f38b312C7c8F965D2e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAddedMarket",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRemovedMarket",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSupportedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "addMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokenToToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "removeMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenTocToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "wrappedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf207363e4a20fa5d6aa137e98ec9226f29a6013c76111e59f15bb2aac00ad9d8",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x7d809B3b23b62D8a455831f38b312C7c8F965D2e",
    "transactionIndex": 16,
    "gasUsed": "539286",
    "logsBloom": "0x
    "blockHash": "0x1daa86bcaf192cf1d06c92201010d73a887d148e64d91b316f6ec30af5b038ed",
    "transactionHash": "0xf207363e4a20fa5d6aa137e98ec9226f29a6013c76111e59f15bb2aac00ad9d8",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 17179449,
        "transactionHash": "0xf207363e4a20fa5d6aa137e98ec9226f29a6013c76111e59f15bb2aac00ad9d8",
        "address": "0x7d809B3b23b62D8a455831f38b312C7c8F965D2e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000056e44874f624ebde6efcc783efd685f0fbdc6dcf"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x1daa86bcaf192cf1d06c92201010d73a887d148e64d91b316f6ec30af5b038ed"
      }
    ],
    "blockNumber": 17179449,
    "cumulativeGasUsed": "3479112",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF"
  ],
  "numDeployments": 1,
  "solcInputHash": "d6e5edafc719d0aa6028bc97fdac07f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAddedMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRemovedMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"addMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenToToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTocToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wrappers/CompoundV3Wrapper.sol\":\"CompoundV3Wrapper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/interfaces/IComet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n// CompoundV3 money market interface\\ninterface IComet {\\n    function baseToken() external view returns (address);\\n    function supply(address asset, uint amount) external;\\n    function withdraw(address asset, uint amount) external;\\n}\\n\",\"keccak256\":\"0x37f32281688299d831dd4ada2c0b98653a5fdf9a9e23716196a78ef38621cd74\",\"license\":\"MIT\"},\"contracts/interfaces/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrapper {\\n    error NotSupportedToken();\\n    error NotAddedMarket();\\n    error NotRemovedMarket();\\n\\n    function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);\\n}\\n\",\"keccak256\":\"0x1d3cefe7c67b9f9750823be723dd0b00f9894ec4e0cd078eac321a2cff8f7da2\",\"license\":\"MIT\"},\"contracts/wrappers/CompoundV3Wrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IWrapper.sol\\\";\\nimport \\\"../interfaces/IComet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CompoundV3Wrapper is IWrapper, Ownable {\\n    mapping(IERC20 => IERC20) public cTokenToToken;\\n    mapping(IERC20 => IERC20) public tokenTocToken;\\n\\n    constructor(address _owner) Ownable(_owner) {} // solhint-disable-line no-empty-blocks\\n\\n    function addMarkets(address[] memory tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 baseToken = IERC20(IComet(tokens[i]).baseToken());\\n            cTokenToToken[IERC20(tokens[i])] = baseToken;\\n            tokenTocToken[baseToken] = IERC20(tokens[i]);\\n        }\\n    }\\n\\n    function removeMarkets(address[] memory tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20 baseToken = IERC20(IComet(tokens[i]).baseToken());\\n            delete cTokenToToken[IERC20(tokens[i])];\\n            delete tokenTocToken[baseToken];\\n        }\\n    }\\n\\n    function wrap(IERC20 token) external view override returns (IERC20 wrappedToken, uint256 rate) {\\n        IERC20 baseToken = cTokenToToken[token];\\n        IERC20 cToken = tokenTocToken[token];\\n        if (baseToken != IERC20(address(0))) {\\n            return (baseToken, 1e18);\\n        } else if (cToken != IERC20(address(0))) {\\n            return (cToken, 1e18);\\n        } else {\\n            revert NotSupportedToken();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35949268cab31b6523e4b3764756a1ea76530c07ec6ea54739a0e6d5bbe16812\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100b957601f61092b38819003918201601f19168301916001600160401b038311848410176100bd578084926020946040528339810103126100b957516001600160a01b0390818116908190036100b95780156100a1575f80546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361085990816100d28239f35b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60406080815260049081361015610014575f80fd5b5f3560e01c8063023276f01461054957806346bfac4a146104e2578063715018a6146104485780637d683561146103e15780638da5cb5b14610390578063bfef7bdf14610280578063da40385d146101595763f2fde38b14610074575f80fd5b346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555781359173ffffffffffffffffffffffffffffffffffffffff91828416809403610155576100ce6107d3565b83156101265750505f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b905f60249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b5f80fd5b5090346101555761016936610620565b6101716107d3565b5f5b815181101561027e5773ffffffffffffffffffffffffffffffffffffffff908161019d8285610766565b511691855180937fc55dae63000000000000000000000000000000000000000000000000000000008252818760209384935afa801561027457826002916001965f91610247575b501691836101f28689610766565b51165f52858152885f20937fffffffffffffffffffffffff00000000000000000000000000000000000000009484868254161790556102318689610766565b5116925f5252865f209182541617905501610173565b6102679150843d861161026d575b61025f81836105b2565b8101906107a7565b5f6101e4565b503d610255565b87513d5f823e3d90fd5b005b5034610155579061029036610620565b916102996107d3565b5f925b805184101561027e5773ffffffffffffffffffffffffffffffffffffffff93846102c68284610766565b511694835180967fc55dae63000000000000000000000000000000000000000000000000000000008252818760209384935afa908115610386576001949596975f92610366575b50826002929361031d8689610766565b51165f52858252875f20937fffffffffffffffffffffffff000000000000000000000000000000000000000094858154169055165f5252845f209081541690550192919061029c565b6002925061038090823d841161026d5761025f81836105b2565b9161030d565b85513d5f823e3d90fd5b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff5f54169051908152f35b5090346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557359073ffffffffffffffffffffffffffffffffffffffff808316809303610155576020925f5260028352815f2054169051908152f35b34610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555761047e6107d3565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b5090346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557359073ffffffffffffffffffffffffffffffffffffffff808316809303610155576020925f5260018352815f2054169051908152f35b5090346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155573573ffffffffffffffffffffffffffffffffffffffff908181168103610155576105a3906106de565b90918351921682526020820152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105f357604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126101555767ffffffffffffffff9160043583811161015557816023820112156101555780600401359384116105f3578360051b906040519461068c60208401876105b2565b85526024602086019282010192831161015557602401905b8282106106b2575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036101555781529083019083016106a4565b73ffffffffffffffffffffffffffffffffffffffff8091165f5260016020528060405f20541690600260205260405f2054168115155f14610727575090670de0b6b3a764000090565b9050801561073c5790670de0b6b3a764000090565b60046040517fc8a08d6f000000000000000000000000000000000000000000000000000000008152fd5b805182101561077a5760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90816020910312610155575173ffffffffffffffffffffffffffffffffffffffff811681036101555790565b73ffffffffffffffffffffffffffffffffffffffff5f541633036107f357565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220bae57b1e1aa59adb9f52efae0462e2f06bcb0561852f4c33680a4342a523e43764736f6c63430008170033",
  "deployedBytecode": "0x60406080815260049081361015610014575f80fd5b5f3560e01c8063023276f01461054957806346bfac4a146104e2578063715018a6146104485780637d683561146103e15780638da5cb5b14610390578063bfef7bdf14610280578063da40385d146101595763f2fde38b14610074575f80fd5b346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555781359173ffffffffffffffffffffffffffffffffffffffff91828416809403610155576100ce6107d3565b83156101265750505f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b905f60249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b5f80fd5b5090346101555761016936610620565b6101716107d3565b5f5b815181101561027e5773ffffffffffffffffffffffffffffffffffffffff908161019d8285610766565b511691855180937fc55dae63000000000000000000000000000000000000000000000000000000008252818760209384935afa801561027457826002916001965f91610247575b501691836101f28689610766565b51165f52858152885f20937fffffffffffffffffffffffff00000000000000000000000000000000000000009484868254161790556102318689610766565b5116925f5252865f209182541617905501610173565b6102679150843d861161026d575b61025f81836105b2565b8101906107a7565b5f6101e4565b503d610255565b87513d5f823e3d90fd5b005b5034610155579061029036610620565b916102996107d3565b5f925b805184101561027e5773ffffffffffffffffffffffffffffffffffffffff93846102c68284610766565b511694835180967fc55dae63000000000000000000000000000000000000000000000000000000008252818760209384935afa908115610386576001949596975f92610366575b50826002929361031d8689610766565b51165f52858252875f20937fffffffffffffffffffffffff000000000000000000000000000000000000000094858154169055165f5252845f209081541690550192919061029c565b6002925061038090823d841161026d5761025f81836105b2565b9161030d565b85513d5f823e3d90fd5b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff5f54169051908152f35b5090346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557359073ffffffffffffffffffffffffffffffffffffffff808316809303610155576020925f5260028352815f2054169051908152f35b34610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555761047e6107d3565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b5090346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557359073ffffffffffffffffffffffffffffffffffffffff808316809303610155576020925f5260018352815f2054169051908152f35b5090346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155573573ffffffffffffffffffffffffffffffffffffffff908181168103610155576105a3906106de565b90918351921682526020820152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105f357604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126101555767ffffffffffffffff9160043583811161015557816023820112156101555780600401359384116105f3578360051b906040519461068c60208401876105b2565b85526024602086019282010192831161015557602401905b8282106106b2575050505090565b813573ffffffffffffffffffffffffffffffffffffffff811681036101555781529083019083016106a4565b73ffffffffffffffffffffffffffffffffffffffff8091165f5260016020528060405f20541690600260205260405f2054168115155f14610727575090670de0b6b3a764000090565b9050801561073c5790670de0b6b3a764000090565b60046040517fc8a08d6f000000000000000000000000000000000000000000000000000000008152fd5b805182101561077a5760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b90816020910312610155575173ffffffffffffffffffffffffffffffffffffffff811681036101555790565b73ffffffffffffffffffffffffffffffffffffffff5f541633036107f357565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220bae57b1e1aa59adb9f52efae0462e2f06bcb0561852f4c33680a4342a523e43764736f6c63430008170033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/wrappers/CompoundV3Wrapper.sol:CompoundV3Wrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15265,
        "contract": "contracts/wrappers/CompoundV3Wrapper.sol:CompoundV3Wrapper",
        "label": "cTokenToToken",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)1687,t_contract(IERC20)1687)"
      },
      {
        "astId": 15271,
        "contract": "contracts/wrappers/CompoundV3Wrapper.sol:CompoundV3Wrapper",
        "label": "tokenTocToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)1687,t_contract(IERC20)1687)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1687": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)1687,t_contract(IERC20)1687)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1687",
        "label": "mapping(contract IERC20 => contract IERC20)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20)1687"
      }
    }
  }
}